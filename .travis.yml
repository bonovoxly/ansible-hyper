---

language: generic
python: "2.7"

matrix:
  include:
    - name: "Ubuntu 14.04 LTS with Ansible 2.4"
      os: linux
      dist: trusty
      sudo: required
      env: ANSIBLE_VERSION='<2.5.0' PYTHON_VERSION=2.7.15
    - name: "Ubuntu 16.04 LTS with Ansible 2.5"
      os: linux
      dist: xenial
      sudo: required
      env: ANSIBLE_VERSION='<2.6.0' PYTHON_VERSION=3.7.2
    - name: "Ubuntu 16.04 LTS with Ansible 2.6"
      os: linux
      dist: xenial
      sudo: required
      env: ANSIBLE_VERSION='<2.7.0' PYTHON_VERSION=3.7.2
    - name: "Ubuntu 16.04 LTS with Ansible 2.7"
      os: linux
      dist: xenial
      sudo: required
      env: ANSIBLE_VERSION='<2.8.0' PYTHON_VERSION=3.7.2

# Install Ansible
addons:
  apt:
    packages:
    - python-pip
    - python-dev

install:
  # Install Ansible with pip on Ubuntu
  - if [[ "$TRAVIS_OS_NAME" != "osx" ]]; then sudo pip install ansible==${ANSIBLE_VERSION}; fi

  # Install pre-commit with pip on Ubuntu
  - if [[ "$TRAVIS_OS_NAME" != "osx" ]]; then sudo pip install pre-commit; fi

  # Check Ansible version
  - ansible --version

  # Create ansible.cfg with correct roles_path
  - printf '[defaults]\nroles_path=../\n' > ansible.cfg

  # Configure ansible.cfg on Linux
  - >
    if [[ "$TRAVIS_OS_NAME" != "osx" ]]; then
      printf '\n[privilege_escalation]\nbecome=True' >> ansible.cfg
    fi

script:
  # Run pre-commit hooks
  - pre-commit run -a

  # Basic role syntax check
  - ansible-playbook tests/test.yml -i tests/inventory --syntax-check

  # Test role run
  - >
    ansible-playbook tests/test.yml -i tests/inventory --connection=local

  # Test idempotence
  - >
    ansible-playbook tests/test.yml -i tests/inventory --connection=local
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  - command -v hyper
